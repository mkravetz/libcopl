.\" This manpage is Copyright (C) 2009, 2010 IBM
.\" Written by Chris J Arges <arges@us.ibm.com>
.\"            Mike Kravetz <kravetz@us.ibm.com>
.\"
.TH COP_SYM_CRYPTO 3 2010-06-30 "Libcop" "Libcop Programmer's Manual"
.SH NAME
cop_sym_crypto \- symmetric coprocessor functions
.SH SYNOPSIS
.nf
.B #include <libcop.h>
.sp
.I hash functions:
errorn cop_md5(const void *source, size_t length, void *digest,
	       void *message_bit_length, uint8_t flag);

errorn cop_sha1(const void *source, size_t length, void *digest,
		void *message_bit_length, uint8_t flag);

errorn cop_sha256(const void *source, size_t length, void *digest,
		  void *message_bit_length, uint8_t flag);

errorn cop_sha512(const void *source, size_t length, void *digest,
		  void *message_bit_length, uint8_t flag);

.I sha hmac functions:
errorn cop_sha1_hmac(const void *source, size_t length, void *digest,
		     void *message_bit_length, void *key, uint8_t flag);

errorn cop_sha256_hmac(const void *source, size_t length, void *digest,
		       void *message_bit_length, void *key, uint8_t flag);

errorn cop_sha512_hmac(const void *source, size_t length, void *digest,
		       void *message_bit_length, void *key, uint8_t flag);

.I rc4 functions:
errorn cop_rc4_40(const void *key, size_t length, const void *indata,
		  void *outdata, void *state, uint8_t * x_val, uint8_t * y_val,
		  uint8_t flag);

errorn cop_rc4_64(const void *key, size_t length, const void *indata,
		  void *outdata, void *state, uint8_t * x_val, uint8_t * y_val,
		  uint8_t flag);

errorn cop_rc4_128(const void *key, size_t length, const void *indata,
		   void *outdata, void *state, uint8_t * x_val, uint8_t * y_val,
		   uint8_t flag);

.I des functions
errorn cop_des_ecb(const void *input, size_t input_sz, void *output,
		   void *key_schedule, uint8_t enc, uint8_t pad_rules,
		   uint8_t pad_byte);

errorn cop_tdes_ecb(const void *input, size_t input_sz, void *output,
		    void *key_schedule, uint8_t enc, uint8_t pad_rules,
		    uint8_t pad_byte);

errorn cop_des_cbc(const void *input, size_t input_sz, void *output,
		   void *key_schedule, void *initial_value, uint8_t enc,
		   uint8_t pad_rules, uint8_t pad_bytes);

errorn cop_tdes_cbc(const void *input, size_t input_sz, void *output,
		    void *key_schedule, void *initial_value, uint8_t enc,
		    uint8_t pad_rules, uint8_t pad_bytes);

.I aes functions
errorn cop_aes_ecb_128(const void *input, size_t input_sz, void *output,
		       void *key_schedule, uint8_t enc, uint8_t pad_rules,
		       uint8_t pad_byte);

errorn cop_aes_ecb_192(const void *input, size_t input_sz, void *output,
		       void *key_schedule, uint8_t enc, uint8_t pad_rules,
		       uint8_t pad_byte);

errorn cop_aes_ecb_256(const void *input, size_t input_sz, void *output,
		       void *key_schedule, uint8_t enc, uint8_t pad_rules,
		       uint8_t pad_byte);

errorn cop_aes_cbc_128(const void *input, size_t input_sz, void *output,
		       void *key_schedule, void *initial_value, uint8_t enc,
		       uint8_t pad_rules, uint8_t pad_byte);

errorn cop_aes_cbc_192(const void *input, size_t input_sz, void *output,
		       void *key_schedule, void *initial_value, uint8_t enc,
		       uint8_t pad_rules, uint8_t pad_byte);

errorn cop_aes_cbc_256(const void *input, size_t input_sz, void *output,
		       void *key_schedule, void *initial_value, uint8_t enc,
		       uint8_t pad_rules, uint8_t pad_byte);
.SH DESCRIPTION
.SS hash functions
functions:
.RS
.B cop_md5, cop_sha1, cop_sha256, cop_sha512
.RE
.P
parameters:
.RS
.I const void *source
is a pointer source data to be hashed
.P
.I size_t length
is the length of the source data in bytes
.P
.I void *digest
is the output pointer of the hash function (must be preallocated)
.P
.I void *message_bit_length
this value must be set to the total bit length during the last hash operation. This only applies during the final hash in a multi-pass hash. Other operations can leave this parameter NULL.
.P
.I uint8_t flag
determines if multi-pass or single-pass operation is desired. For one-pass operation use COP_FLAG_ONESHOT. For multi-pass use COP_FLAG_FIRST, COP_FLAG_MIDDLE, and COP_FLAG_LAST on the first, middle, and last operations respectively. 
.RE

.SS sha hmac functions
functions:
.RS
.B cop_sha1_hmac, cop_sha256_hmac, cop_sha512_hmac
.RE
.P
parameters:
.RS
.I const void *source
is a pointer source data to be hashed
.P
.I size_t length
is the length of the source data in bytes
.P
.I void *digest
is the output pointer of the hash function (must be preallocated)
.P
.I void *message_bit_length
must be set to the total bit length during the last hash operation. This only applies during the final hash in a multi-pass hash. Other operations can leave this parameter NULL.
.P
.I void *key
is the key used in the hmac function. SHA1,256 uses 64 byte keys. SHA512 uses 128 byte keys.
.P
.I uint8_t flag
determines if multi-pass or single-pass operation is desired. For one-pass operation use COP_FLAG_ONESHOT. For multi-pass use COP_FLAG_FIRST, COP_FLAG_MIDDLE, and COP_FLAG_LAST on the first, middle, and last operations respectively. 
.RE

.SS rc4 functions
functions:
.RS
.B cop_rc4_40, cop_rc4_64, cop_rc4_128
.RE
.P
parameters:
.RS
.I const void *key
the key used for the rc4 cipher. RC4-40 uses a 40 byte key, RC4-64 uses a 64 byte key, an RC4-128 uses a 128 byte key.
.P
.I size_t length
is the length of the source data in bytes
.P
.I const void *indata
is a pointer to the source data to be ciphered
.P
.I void *outdata
is the output pointer of the rc4 function
.P
.I void *state
is a pointer to the 128 byte value used during partial message processing. Input on COP_FLAG_MIDDLE and COP_FLAG_LAST. Output on COP_FLAG_FIRST, COP_FLAG_MIDDLE. Can be NULL for COP_FLAG_ONESHOT.
.P
.I uint8_t *x_val
is a pointer to the 8 byte value used during partial message processing. Input on COP_FLAG_MIDDLE and COP_FLAG_LAST. Output on COP_FLAG_FIRST, COP_FLAG_MIDDLE. Can be NULL for COP_FLAG_ONESHOT.
.P
.I uint8_t *y_val
is a pointer to the 8 byte value used during partial message processing. Input on COP_FLAG_MIDDLE and COP_FLAG_LAST. Output on COP_FLAG_FIRST, COP_FLAG_MIDDLE. Can be NULL for COP_FLAG_ONESHOT.
.P
.I uint8_t flag
determines if multi-pass or single-pass operation is desired. For one-pass operation use COP_FLAG_ONESHOT. For multi-pass use COP_FLAG_FIRST, COP_FLAG_MIDDLE, and COP_FLAG_LAST on the first, middle, and last operations respectively. 
.RE

.SS des/aes functions
functions:
.RS
.B cop_des_ecb, cop_tdes_ecb, cop_des_cbc, cop_tdes_cbc
.P
.B cop_aes_ecb_128, cop_aes_ecb_192, cop_aes_ecb_256
.P
.B cop_aes_cbc_128, cop_aes_cbc_192, cop_aes_cbc_256
.RE
.P
parameters:
.RS
.I const void *input
is a pointer to the source data to be ciphered
.P
.I size_t input_sz
is the size of the input data
.P
.I void *output
is the output pointer of the function
.P
.I void *key_schedule
is a pointer to the key to be used. Key sizes in bytes: DES 7, TDES 21, AES-128 16, AES-192 24, AES-256 32.
.P
.I void *initial_value (cbc only)
is the initial value input during CBC (chaining block cipher) operations.
.P
.I uint8_t enc
determines if we are encrypting or decrypting. 1 is encrypt, 0 is decrypt.
.P
.I uint8_t pad_rules
determines the type of padding used by the function. COP_RPAD_NONE is no padding. COP_RPAD_ZERO uses the pad_bytes value followed by zeros. COP_RPAD_INC uses incrementally increasing values of pad_bytes. COP_RPAD_USE uses concatenations of pad_bytes.
.P
.I uint8_t pad_bytes
is the value used, if a pad rule uses a padding byte.
.P
.RE

.SH SEE ALSO
licop(3)
cop_asym_crypto_async(3)
